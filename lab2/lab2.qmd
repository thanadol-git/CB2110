---
title: "Lab 2"
format: 
  html:
    toc: true
    code-fold: true
    theme: lumen

execute: 
  # warning: false
  message: false
  # echo: false
---

Welcome back to the lab again. From last week, you may have worked with mass spectrometry data and processed a bit of them by yourself. This lab will look into the results that you have make and we will practice a bit of data wrangling and visualization with R. Thus, you can now understand the dataset much better with many more aspects from your result. As usual, please fill in your information here so we can give you nice some nice scores later. 


- Member1:
- Member2: 
- Contact email: 

Same here, there will be ten questions and three bonus questions for you to answer. Please try to elaborate this exercise with the lectures from the first weeks. The main goal of this lab is that you are not afraid to work with mass spectrometry as it is amazing. Woo hoo. 


## Intended learning outcomes (ILOs) 

On completion of the lab, the student should be able to:
```
* demonstrate data-processing procedures in mass spectrometry proteomics
* demonstrate the ability to answer statistical questions with computational tools in mass spectrometry
* identify quality of high-throughput dataset and handle with statistical understandings
* identify relevant issues in technologies and data with accessible visualization techniques
```
## Let's start! 

You may recall from what we have done in the first lab. Now, we want to look at them properly. Let's start with some basic R programming skill. So, please just copy the file and change the path below. (If you don't rememer, just take it from your submission)



```{r}
# Libraries ---- 
#| warning: false
#| echo: false
#| message: false

library(dplyr)
library(ggplot2)
library(tidyverse)
library(stringr)
library(visdat)
library(naniar)



# File path of the result
# Fix when export
path <- '/home/thanadol/Documents/GitHub/CB2110/lab2/sdrf_openms_design_msstats_in.csv'
ms_result <- read.csv(path)

```

# Data overview
Let's check how do your data look. You can do it basically with any spreadsheet or texteditor software. R is also one of them so don't be afraid. 

```{r}
#| echo: true
head(ms_result)
# or 
# View(ms_result)
```
## Q1. 
**What do you see in the output file? What are the columns and the rows** 

Ans.

You can now see that it's difficult to see them clearly as there are many rows. It's hard to get an overview of the dataset. Let's dig a bit deeper and make it a little more organized. Let's now check numbers of samples. These should be related to what you have with the SDRF file previously. 

```{r}
# Number of samples and what are they
ms_result %>% 
  # Select column Reference and Condition
  select(Reference, Condition) %>% 
  # Remove duplicated rows in the table
  distinct()
```
Does it look similar? Definitely, haha. 

Now, look at the proteins. 

## Q2. 
**Let's check the peptides and proteins. How many unique proteins and peptides? What percentaged of matched protein from your library?**

```{r}
# Peptides and Protein 
# Extract a table of two columns with unique proteins and peptides

# ms_result %>% 
#   select(_,__) 
#   distinct(___)

```

Ans.

## Q3. 
**Do you see any modification during sample pereparation? If yes, why do we need them?**

Ans. 


## BQ1. 
**Please show a summarised table containing numbers of protein counts and the detectable peptide numbers. For example, there are 10 proteins and each of them has 5 detectable peptides.**

```{r}
# Peptide per protein count
# Hint: count()
# This will give you numbers of duplicated items in a particular vector column
# Fix
ms_result %>% 
  select(ProteinName, PeptideSequence) %>%
  distinct() %>% 
  count(ProteinName) %>% 
  arrange(n) %>% count(n)

```


# Dynamic range

Now, let's look at the intensity of the peptides. We will use ggplot2 to visualize the data.

```{r}
ms_result %>% 
  ggplot(aes(x =reorder(PeptideSequence, Intensity, mean), 
  y = Intensity, color = Condition)) +
 # geom_point(alpha = .4) + 
  geom_smooth(aes(group = Reference)) +
  labs(x = "Peptides", y = "Intensity",
  title = "Overall peptide Intensity")+ 
  scale_y_log10() + 
 # theme_classic() +
  theme(legend.position = "none",
  axis.text.x = element_blank(),
  axis.ticks.x = element_blank(),
  plot.title = element_text(hjust = 0.5)) 

```

You now can see the dynamic range of every proteins that were detected. Optionally, please arrange peptide names by its protein concentration. 

## Q4. 
**Pick one protein that is comprised of 10 detectable peptides. Visulize the peptide intensity. Do we see every peptide in every sample? Does every peptide have the same intensity in each sample for each  peptide. If not, why?**

```{r}

## Select a protein with 10 peptides that are detected in every sample
# prot_10 <- ms_result %>% 
#   select(ProteinName, PeptideSequence) %>%
#   distinct() %>%
#   count(ProteinName) %>%
#   filter(n == 10) %>%
#   slice_sample(n = 1) %>% 
#   pull(ProteinName)

# print(prot_10)
## Vislualize it 

# ms_result %>% 
#   filter(ProteinName == prot_10) %>%  
#   ggplot(aes(x =reorder(PeptideSequence, Intensity, mean), y = Intensity, color = Reference, group=Reference)) +
#   geom_point(alpha = .4) + geom_line() +
#   theme_classic() 

```

Ans.

# Missing data 
Let's now visualize the data that you already have with their intensities. We will look the data at the peptide level. 
 
```{r}
select_pept <- ms_result %>% 
  select(Reference, PeptideSequence, Intensity) %>% 
  pivot_wider(names_from = Reference, values_from = Intensity, 
  values_fn = list) %>%
  head()

```


The problem now is that we can detect some missing data in the dataset. This is a common problem in mass spectrometry data. We can see that some peptides are not detected in some samples.At the same time, some detectable peptides are not unique to a particular protein.

## Q5. 
**Summarise the list of unique peptide to only one protein**

```{r}
ms_result %>% 
  select(PeptideSequence, ProteinName) %>%
  distinct() %>%
  count(PeptideSequence) %>%
  head()
```

```{r}
ms_result %>% 
  select(PeptideSequence, ProteinName) %>%
  distinct()  %>%
  count(PeptideSequence) %>% 
  head()
```